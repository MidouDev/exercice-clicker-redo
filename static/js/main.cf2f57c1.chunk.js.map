{"version":3,"sources":["Header.js","Clicker.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Clicker","_ref","counter","onPlusClick","onRefreshClick","onMinusClick","onClick","App","state","_this","setState","src_Header_0","src_Clicker_0","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2PAceA,SAXA,kBACXC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,0CACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BAAf,sBCiBCC,SAtBC,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,QAAQC,EAAVF,EAAUE,YAAYC,EAAtBH,EAAsBG,eAAeC,EAArCJ,EAAqCI,aAArC,OACZT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,WAAMI,IAEVN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBO,QAASH,GACzCP,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iCAEjBH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,qBAAqBO,QAASF,GAC5CR,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yBAEjBH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,mBAAmBO,QAASD,GAC1CT,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uCCsBlBQ,0NA/BbC,MAAQ,CACNN,QAAU,KAGZC,YAAc,WACZM,EAAKC,SAAS,CAACR,QAAUO,EAAKD,MAAMN,QAAU,OAGhDE,eAAiB,WACfK,EAAKC,SAAS,CAACR,QAAU,OAG3BG,aAAe,WACbI,EAAKC,SAAS,CAACR,QAAUO,EAAKD,MAAMN,QAAU,6EAI9C,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAACc,EAAD,CACEV,QAAWW,KAAKL,MAAMN,QACtBC,YAAaU,KAAKV,YAClBC,eAAgBS,KAAKT,eACrBC,aAAcQ,KAAKR,uBA1BXS,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cf2f57c1.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Header.css'\r\n\r\nconst Header = () => (\r\n    <div className=\"App-header\">\r\n        <div className=\"container\">\r\n            <div className=\"row m-auto\">\r\n              <i className=\"fa fa-hand-pointer-o fa-4x text-white\"></i>\r\n              <div className=\"h1 ml-2 my-auto text-light\">React Clicker</div>\r\n            </div>\r\n        </div>  \r\n    </div>\r\n)\r\n\r\nexport default Header;","import React from 'react';\r\nimport './Clicker.css';\r\n\r\nconst Clicker = ({counter,onPlusClick,onRefreshClick,onMinusClick}) => (\r\n    <div className=\"container\">\r\n        <div className=\"clickerContainer\">\r\n            <div className=\"screen d-flex\">\r\n                <div>{counter}</div>\r\n            </div>\r\n            <div className=\"controllers\">\r\n                <button className=\"controller plus\" onClick={onPlusClick}>\r\n                    <i className=\"fa fa-plus fa-2x text-white\"></i>\r\n                </button>\r\n                <button className=\"controller refresh\" onClick={onRefreshClick}>\r\n                    <i className=\"fa fa-refresh fa-2x\"></i>\r\n                </button>\r\n                <button className=\"controller minus\" onClick={onMinusClick}>\r\n                    <i className=\"fa fa-minus fa-2x text-white\"></i>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    \r\n);\r\n\r\nexport default Clicker;","import React, { Component } from 'react';\r\nimport Header from './Header'\r\nimport Clicker from './Clicker'\r\nimport './App.css';\r\nimport './bootstrap.min.css';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    counter : 0,\r\n  }\r\n\r\n  onPlusClick = () => {\r\n    this.setState({counter : this.state.counter + 1})\r\n  }\r\n\r\n  onRefreshClick = () => {\r\n    this.setState({counter : 0})\r\n  }\r\n\r\n  onMinusClick = () => {\r\n    this.setState({counter : this.state.counter - 1})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <Clicker \r\n          counter = {this.state.counter}\r\n          onPlusClick={this.onPlusClick}\r\n          onRefreshClick={this.onRefreshClick}\r\n          onMinusClick={this.onMinusClick}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'font-awesome/css/font-awesome.min.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}